{
  "String array": {
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "prefix": ":array[string]",
    "body": [
      "const ${1:array} = ['${2:item}', '${3:item}'];"
    ]
  },
  "Object array": {
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "prefix": ":array[object]",
    "body": [
      "const ${1:array} = [{${2:key}: ${3:value}}];"
    ]
  },

  "Find": {
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "prefix": ":find",
    "body": [
      "${1:array}.find(${2:item} => $3);"
    ]
  },
  "Find Index": {
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "prefix": ":findIndex",
    "body": [
      "${1:array}.findIndex(${2:item} => $3);"
    ]
  },
  "Filter": {
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "prefix": ":filter",
    "body": [
      "${1:array}.filter(${2:item} => $3);"
    ]
  },
  "For Each": {
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "prefix": ":each",
    "body": [
      "${1:array}.forEach(${2:item} => $4);"
    ]
  },
  "Map": {
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "prefix": ":map",
    "body": [
      "${1:array}.map(${2:item} => ${3:return});"
    ]
  },
  "Reduce": {
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "prefix": ":reduce",
    "body": [
      "${1:array}.reduce((${2:accumulator}, ${3:current}) => {",
      "  $5, ${6:initialValue}",
      "});"
    ]
  },

  "class": {
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "prefix": ":class",
    "body": [
      "class ${1:identifier} {",
      "  ${2:prop} = '${3:value}';",
      "}",
    ]
  },

  "Object Statement": {
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "prefix": ":object",
    "body": [
      "const ${1:object} = {",
      "  ${2:key}: ${3:value}",
      "};",
    ]
  },

  "Function Statement": {
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "prefix": ":fnc",
    "body": [
      "function ${1:name}(${2:params}) {",
      "  return $3;",
      "};",
      "",
      "${1:name}(${5:args});"
    ]
  },
  "Named Arrow Function": {
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "prefix": ":arrow[named]",
    "body": [
      "const ${1:identifier} = (${2:params}) => {",
      "  return $3;",
      "};",
      "",
      "$1(${4:args});"
    ]
  },
  "Anonymous Arrow Function": {
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "prefix": ":arrow[anonymous]",
    "body": [
      "(${1:params}) => {",
      "  return $2;",
      "};",
    ]
  },
  "Short Arrow Function": {
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "prefix": ":arrow[short]",
    "body": [
      "${1:params} => $2;"
    ]
  },

  "Destructuring Object": {
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "prefix": ":dst[object]",
    "body": [
      "const {${1:name}} = ${2:object};",
    ]
  },
  "Destructuring Array": {
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "prefix": ":dst[array]",
    "body": [
      "const [${1:name}] = ${2:array};",
    ]
  },

  "For Of": {
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "prefix": ":for[of]",
    "body": [
      "for (const ${1:item} of ${2:array}) {",
      "  $3",
      "}"
    ]
  },

  "Import named": {
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "prefix": ":im[named]",
    "body": [
      "import { ${1:name} } from '${2:module}';"
    ]
  },
  "Import default": {
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "prefix": ":im[default]",
    "body": [
      "import ${1:name} from '${2:module}';"
    ]
  },
  "Export named": {
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "prefix": ":ex[named]",
    "body": [
      "export $1;"
    ]
  },
  "Export default": {
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "prefix": ":ex[default]",
    "body": [
      "export default $1;"
    ],
  },
  "React Router Dom":{
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "prefix": ":im[route]",
    "body": [
      "import { ${1:Routes} } from 'react-router-dom';",
    ]

  },
  "CSS Module": {
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "prefix": ":im[cssModule]",
    "body": [
      "import styles from './styles.module.css';",
    ]
  },

  "React Function Component": {
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "prefix": ":rfc",
    "body": [
      "import { useState } from 'react';",
      "",
      "export default function ${TM_FILENAME_BASE}({$4}) {",
      "  const [${1:state}, set${1/(.*)/${1:/capitalize}/}] = useState(${2:initialValue});",
      "",
      "  return (",
      "    <div>${5:Hello}</div>",
      "  )",
      "}",
      "",
    ]
  },
  "React Function Component TypeScript": {
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "prefix": ":rfc[t]",
    "body": [
      "import { useState } from 'react';",
      "",
      "type ${TM_FILENAME_BASE}Props = {",
      "  $3",
      "}",
      "",
      "export default function ${TM_FILENAME_BASE}({$4}: ${TM_FILENAME_BASE}Props) {",
      "  const [${1:state}, set${1/(.*)/${1:/capitalize}/}] = useState(${2:initialValue});",
      "",
      "  return (",
      "    <div>${5:Hello}</div>",
      "  )",
      "}",
      "",
    ]
  },
  "Styled Component": {
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "prefix": ":styled",
    "body": [
      "import styled from 'styled-components';",
      "",
      "const ${1:name} = styled.${2:tag}`",
      "  ${3:style}",
      "`;",
    ]
  },

  "useState": {
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "prefix": ":use[state]",
    "body": [
      "const [${1:state}, set${1/(.*)/${1:/capitalize}/}] = useState(${2:initialValue});"
    ]
  },
  "useEffect": {
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "prefix": ":use[effect]",
    "body": [
      "useEffect(() => {",
      "  $1",
      "}, [${2:args}]);"
    ]
  },
  "useMemo": {
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "prefix": ":use[memo]",
    "body": [
      "useMemo(() => {",
      "  $1",
      "}, [${2:args}]);"
    ]
  },
  "useCallback": {
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "prefix": ":use[callback]",
    "body": [
      "useCallback(() => {",
      "  $1",
      "}, [${2:args}]);"
    ]
  },
  "useRef": {
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "prefix": ":use[ref]",
    "body": [
      "const ${1:ref} = useRef(${2:initialValue});"
    ]
  },
  "useContext": {
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "prefix": ":use[context]",
    "body": [
      "const ${1:context} = useContext(${2:Context});"
    ]
  },
  "useReducer": {
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "prefix": ":use[reducer]",
    "body": [
      "const [${1:state}, ${2:dispatch}] = useReducer(${3:reducer}, ${4:initialState});"
    ]
  },
  
  "Print to console": {
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "prefix": ":log",
    "body": [
      "console.log($1);",
      "$2"
    ]
  },
  "Fragment": {
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "prefix": ":fragment",
    "body": [
      "<>",
      "  $1",
      "</>",
    ]
  },
  "Interface": {
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "prefix": ":interface",
    "body": [
      "interface ${TM_FILENAME_BASE} {",
      "  ${3:prop}: ${4:type};",
      "}",
    ]
  },
  "Type": {
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "prefix": ":type",
    "body": [
      "type ${TM_FILENAME_BASE} = {",
      "  ${3:prop}: ${4:type};",
      "}",
    ]
  },
  "enum":  {
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "prefix": ":enum",
    "body": [
      "enum ${1:identifier} {",
      "  ${2:prop} = '${3:value}',",
      "}",
    ]
  },

  "struct": {
    "scope": "html",
    "prefix": ":html",
    "body": [
      "<!DOCTYPE html>",
      "<html lang=\"pt-BR\">",
      "  <head>",
      "    <meta charset=\"utf-8\" />",
      "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />",
      "",
      "    <link rel=\"icon\" type=\"image/svg+xml\" href=\"assets/favicon.svg\" />",
      "    <link rel=\"stylesheet\" href=\"assets/css/styles.css\" />",
      "",
      "    <title>$1</title>",
      "  </head>",
      "  <body>",
      "    <div class=\"container\">",
      "      $2",
      "    </div>",
      "  </body>",
      "</html>"
    ]
  },
  "reset": {
    "scope": "css",
    "prefix": ":reset",
    "body": [
      "* {",
      "  margin: 0;",
      "  padding: 0;",
      "  box-sizing: border-box;",
      "}",
      "",
      "html, body, .container {",
      "  height: 100%;",
      "}",
      "",
      "body {",
      "  font-family: 'Roboto', sans-serif;",
      "  -webkit-font-smoothing: antialiased;",
      "  -moz-osx-font-smoothing: grayscale;",
      "  background-color: #f0f0f5;",
      "}",
      "",
      "ul {",
      "  list-style: none;",
      "}",
      "",
      "a {",
      "  color: inherit;",
      "  text-decoration: none;",
      "}",
      "",
      "button {",
      "  cursor: pointer;",
      "}",
      "",
      "input, button, textarea {",
      "  font: 16px 'Roboto', sans-serif;",
      "}",
      "",
      "img {",
      "  max-width: 100%;",
      "  height: auto;",
      "}"
    ]
  }
}